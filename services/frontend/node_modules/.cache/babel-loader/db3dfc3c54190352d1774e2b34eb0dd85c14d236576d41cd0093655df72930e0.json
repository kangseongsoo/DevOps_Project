{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:7000';\n\n// Axios 인스턴스 생성\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 요청 인터셉터 - 토큰 자동 추가\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 응답 인터셉터 - 401 에러 시 로그아웃 처리\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// 인증 API\nexport const authAPI = {\n  // 회원가입\n  register: async userData => {\n    const response = await api.post('/auth/register', userData);\n    return response.data;\n  },\n  // 로그인\n  login: async credentials => {\n    const response = await api.post('/auth/login', credentials);\n    if (response.data.access_token) {\n      localStorage.setItem('token', response.data.access_token);\n    }\n    return response.data;\n  },\n  // 현재 사용자 정보\n  getCurrentUser: async () => {\n    const response = await api.get('/auth/me');\n    return response.data;\n  },\n  // 로그아웃\n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  }\n};\n\n// 채팅 API\nexport const chatAPI = {\n  // 채팅 메시지 전송\n  sendMessage: async (message, sessionId = null) => {\n    const response = await api.post('/chat', {\n      message,\n      session_id: sessionId\n    });\n    return response.data;\n  },\n  // 간단한 채팅 (인증 불필요)\n  sendSimpleMessage: async message => {\n    const response = await api.post('/simple-chat', {\n      message\n    });\n    return response.data;\n  },\n  // 대화 내용 조회\n  getConversation: async sessionId => {\n    const response = await api.get(`/conversation/${sessionId}`);\n    return response.data;\n  },\n  // 대화 삭제\n  deleteConversation: async sessionId => {\n    const response = await api.delete(`/conversation/${sessionId}`);\n    return response.data;\n  }\n};\n\n// 세션 API\nexport const sessionAPI = {\n  // 새 세션 생성\n  createSession: async (title = '새로운 대화') => {\n    const response = await api.post('/sessions', {\n      title\n    });\n    return response.data;\n  },\n  // 사용자 세션 목록 조회\n  getUserSessions: async () => {\n    const response = await api.get('/sessions');\n    return response.data;\n  }\n};\n\n// 헬스 체크 API\nexport const healthAPI = {\n  checkHealth: async () => {\n    const response = await api.get('/health');\n    return response.data;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","authAPI","register","userData","post","data","login","credentials","access_token","setItem","getCurrentUser","get","logout","chatAPI","sendMessage","message","sessionId","session_id","sendSimpleMessage","getConversation","deleteConversation","delete","sessionAPI","createSession","title","getUserSessions","healthAPI","checkHealth"],"sources":["/home/kss/문서/DevOps_Project/services/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:7000';\n\n// Axios 인스턴스 생성\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// 요청 인터셉터 - 토큰 자동 추가\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// 응답 인터셉터 - 401 에러 시 로그아웃 처리\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// 인증 API\nexport const authAPI = {\n  // 회원가입\n  register: async (userData) => {\n    const response = await api.post('/auth/register', userData);\n    return response.data;\n  },\n\n  // 로그인\n  login: async (credentials) => {\n    const response = await api.post('/auth/login', credentials);\n    if (response.data.access_token) {\n      localStorage.setItem('token', response.data.access_token);\n    }\n    return response.data;\n  },\n\n  // 현재 사용자 정보\n  getCurrentUser: async () => {\n    const response = await api.get('/auth/me');\n    return response.data;\n  },\n\n  // 로그아웃\n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  }\n};\n\n// 채팅 API\nexport const chatAPI = {\n  // 채팅 메시지 전송\n  sendMessage: async (message, sessionId = null) => {\n    const response = await api.post('/chat', {\n      message,\n      session_id: sessionId\n    });\n    return response.data;\n  },\n\n  // 간단한 채팅 (인증 불필요)\n  sendSimpleMessage: async (message) => {\n    const response = await api.post('/simple-chat', { message });\n    return response.data;\n  },\n\n  // 대화 내용 조회\n  getConversation: async (sessionId) => {\n    const response = await api.get(`/conversation/${sessionId}`);\n    return response.data;\n  },\n\n  // 대화 삭제\n  deleteConversation: async (sessionId) => {\n    const response = await api.delete(`/conversation/${sessionId}`);\n    return response.data;\n  }\n};\n\n// 세션 API\nexport const sessionAPI = {\n  // 새 세션 생성\n  createSession: async (title = '새로운 대화') => {\n    const response = await api.post('/sessions', { title });\n    return response.data;\n  },\n\n  // 사용자 세션 목록 조회\n  getUserSessions: async () => {\n    const response = await api.get('/sessions');\n    return response.data;\n  }\n};\n\n// 헬스 체크 API\nexport const healthAPI = {\n  checkHealth: async () => {\n    const response = await api.get('/health');\n    return response.data;\n  }\n};\n\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}