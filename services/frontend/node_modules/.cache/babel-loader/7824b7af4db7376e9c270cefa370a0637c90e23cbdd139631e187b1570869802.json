{"ast":null,"code":"// 토큰 관련 유틸리티\nexport const TokenUtils = {\n  // 토큰 저장\n  setToken: token => {\n    localStorage.setItem('token', token);\n  },\n  // 토큰 가져오기\n  getToken: () => {\n    return localStorage.getItem('token');\n  },\n  // 토큰 삭제\n  removeToken: () => {\n    localStorage.removeItem('token');\n  },\n  // 토큰 유효성 검사\n  isTokenValid: () => {\n    const token = localStorage.getItem('token');\n    if (!token) return false;\n    try {\n      // JWT 토큰 디코딩\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      const currentTime = Date.now() / 1000;\n\n      // 토큰 만료 시간 확인\n      return payload.exp > currentTime;\n    } catch (error) {\n      return false;\n    }\n  }\n};\n\n// 사용자 정보 관련 유틸리티\nexport const UserUtils = {\n  // 사용자 정보 저장\n  setUser: user => {\n    localStorage.setItem('user', JSON.stringify(user));\n  },\n  // 사용자 정보 가져오기\n  getUser: () => {\n    const user = localStorage.getItem('user');\n    return user ? JSON.parse(user) : null;\n  },\n  // 사용자 정보 삭제\n  removeUser: () => {\n    localStorage.removeItem('user');\n  },\n  // 로그인 상태 확인\n  isLoggedIn: () => {\n    return TokenUtils.isTokenValid() && UserUtils.getUser() !== null;\n  }\n};\n\n// 인증 보호 컴포넌트를 위한 유틸리티\nexport const AuthGuard = {\n  // 로그인 필요한 페이지 접근 시 체크\n  requireAuth: navigate => {\n    if (!UserUtils.isLoggedIn()) {\n      navigate('/login');\n      return false;\n    }\n    return true;\n  },\n  // 이미 로그인된 사용자가 로그인/회원가입 페이지 접근 시 체크\n  requireGuest: navigate => {\n    if (UserUtils.isLoggedIn()) {\n      navigate('/dashboard');\n      return false;\n    }\n    return true;\n  }\n};\n\n// 폼 유효성 검사 유틸리티\nexport const ValidationUtils = {\n  // 이메일 유효성 검사\n  isValidEmail: email => {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  },\n  // 비밀번호 유효성 검사 (최소 8자, 대소문자, 숫자 포함)\n  isValidPassword: password => {\n    const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d@$!%*?&]{8,}$/;\n    return passwordRegex.test(password);\n  },\n  // 사용자명 유효성 검사 (3-20자, 영문, 숫자, 언더스코어만 허용)\n  isValidUsername: username => {\n    const usernameRegex = /^[a-zA-Z0-9_]{3,20}$/;\n    return usernameRegex.test(username);\n  }\n};\n\n// 에러 메시지 유틸리티\nexport const ErrorUtils = {\n  // API 에러 메시지 파싱\n  parseError: error => {\n    var _error$response, _error$response$data, _error$response2, _error$response2$data;\n    if ((_error$response = error.response) !== null && _error$response !== void 0 && (_error$response$data = _error$response.data) !== null && _error$response$data !== void 0 && _error$response$data.detail) {\n      return error.response.data.detail;\n    }\n    if ((_error$response2 = error.response) !== null && _error$response2 !== void 0 && (_error$response2$data = _error$response2.data) !== null && _error$response2$data !== void 0 && _error$response2$data.message) {\n      return error.response.data.message;\n    }\n    if (error.message) {\n      return error.message;\n    }\n    return '알 수 없는 오류가 발생했습니다.';\n  },\n  // 유효성 검사 에러 메시지\n  getValidationError: (field, value) => {\n    switch (field) {\n      case 'email':\n        if (!value) return '이메일을 입력해주세요.';\n        if (!ValidationUtils.isValidEmail(value)) return '올바른 이메일 형식이 아닙니다.';\n        break;\n      case 'password':\n        if (!value) return '비밀번호를 입력해주세요.';\n        if (!ValidationUtils.isValidPassword(value)) {\n          return '비밀번호는 8자 이상이며 대소문자와 숫자를 포함해야 합니다.';\n        }\n        break;\n      case 'username':\n        if (!value) return '사용자명을 입력해주세요.';\n        if (!ValidationUtils.isValidUsername(value)) {\n          return '사용자명은 3-20자의 영문, 숫자, 언더스코어만 허용됩니다.';\n        }\n        break;\n      default:\n        return null;\n    }\n    return null;\n  }\n};","map":{"version":3,"names":["TokenUtils","setToken","token","localStorage","setItem","getToken","getItem","removeToken","removeItem","isTokenValid","payload","JSON","parse","atob","split","currentTime","Date","now","exp","error","UserUtils","setUser","user","stringify","getUser","removeUser","isLoggedIn","AuthGuard","requireAuth","navigate","requireGuest","ValidationUtils","isValidEmail","email","emailRegex","test","isValidPassword","password","passwordRegex","isValidUsername","username","usernameRegex","ErrorUtils","parseError","_error$response","_error$response$data","_error$response2","_error$response2$data","response","data","detail","message","getValidationError","field","value"],"sources":["/home/kss/문서/DevOps_Project/services/frontend/src/utils/auth.js"],"sourcesContent":["// 토큰 관련 유틸리티\nexport const TokenUtils = {\n  // 토큰 저장\n  setToken: (token) => {\n    localStorage.setItem('token', token);\n  },\n\n  // 토큰 가져오기\n  getToken: () => {\n    return localStorage.getItem('token');\n  },\n\n  // 토큰 삭제\n  removeToken: () => {\n    localStorage.removeItem('token');\n  },\n\n  // 토큰 유효성 검사\n  isTokenValid: () => {\n    const token = localStorage.getItem('token');\n    if (!token) return false;\n\n    try {\n      // JWT 토큰 디코딩\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      const currentTime = Date.now() / 1000;\n      \n      // 토큰 만료 시간 확인\n      return payload.exp > currentTime;\n    } catch (error) {\n      return false;\n    }\n  }\n};\n\n// 사용자 정보 관련 유틸리티\nexport const UserUtils = {\n  // 사용자 정보 저장\n  setUser: (user) => {\n    localStorage.setItem('user', JSON.stringify(user));\n  },\n\n  // 사용자 정보 가져오기\n  getUser: () => {\n    const user = localStorage.getItem('user');\n    return user ? JSON.parse(user) : null;\n  },\n\n  // 사용자 정보 삭제\n  removeUser: () => {\n    localStorage.removeItem('user');\n  },\n\n  // 로그인 상태 확인\n  isLoggedIn: () => {\n    return TokenUtils.isTokenValid() && UserUtils.getUser() !== null;\n  }\n};\n\n// 인증 보호 컴포넌트를 위한 유틸리티\nexport const AuthGuard = {\n  // 로그인 필요한 페이지 접근 시 체크\n  requireAuth: (navigate) => {\n    if (!UserUtils.isLoggedIn()) {\n      navigate('/login');\n      return false;\n    }\n    return true;\n  },\n\n  // 이미 로그인된 사용자가 로그인/회원가입 페이지 접근 시 체크\n  requireGuest: (navigate) => {\n    if (UserUtils.isLoggedIn()) {\n      navigate('/dashboard');\n      return false;\n    }\n    return true;\n  }\n};\n\n// 폼 유효성 검사 유틸리티\nexport const ValidationUtils = {\n  // 이메일 유효성 검사\n  isValidEmail: (email) => {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  },\n\n  // 비밀번호 유효성 검사 (최소 8자, 대소문자, 숫자 포함)\n  isValidPassword: (password) => {\n    const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d@$!%*?&]{8,}$/;\n    return passwordRegex.test(password);\n  },\n\n  // 사용자명 유효성 검사 (3-20자, 영문, 숫자, 언더스코어만 허용)\n  isValidUsername: (username) => {\n    const usernameRegex = /^[a-zA-Z0-9_]{3,20}$/;\n    return usernameRegex.test(username);\n  }\n};\n\n// 에러 메시지 유틸리티\nexport const ErrorUtils = {\n  // API 에러 메시지 파싱\n  parseError: (error) => {\n    if (error.response?.data?.detail) {\n      return error.response.data.detail;\n    }\n    if (error.response?.data?.message) {\n      return error.response.data.message;\n    }\n    if (error.message) {\n      return error.message;\n    }\n    return '알 수 없는 오류가 발생했습니다.';\n  },\n\n  // 유효성 검사 에러 메시지\n  getValidationError: (field, value) => {\n    switch (field) {\n      case 'email':\n        if (!value) return '이메일을 입력해주세요.';\n        if (!ValidationUtils.isValidEmail(value)) return '올바른 이메일 형식이 아닙니다.';\n        break;\n      case 'password':\n        if (!value) return '비밀번호를 입력해주세요.';\n        if (!ValidationUtils.isValidPassword(value)) {\n          return '비밀번호는 8자 이상이며 대소문자와 숫자를 포함해야 합니다.';\n        }\n        break;\n      case 'username':\n        if (!value) return '사용자명을 입력해주세요.';\n        if (!ValidationUtils.isValidUsername(value)) {\n          return '사용자명은 3-20자의 영문, 숫자, 언더스코어만 허용됩니다.';\n        }\n        break;\n      default:\n        return null;\n    }\n    return null;\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}